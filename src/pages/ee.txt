import React, { useEffect, useState, useRef } from "react";
import axios from 'axios';
import Header from '../componets/Header';
import Footer from '../componets/Footer';
import Collab from '../componets/Collaborate'
import { ReactComponent as HandIcon } from '../assets/Hand-logo.svg';
import emailjs from 'emailjs-com';
import gsap from "gsap";
import { useGSAP } from "@gsap/react";
import { ScrollTrigger } from "gsap/ScrollTrigger";


gsap.registerPlugin(ScrollTrigger)
gsap.registerPlugin(useGSAP);

export default function Contact() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [submitted, setSubmitted] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  const [isHoveringContact, setIsHoveringContact] = useState(false);
  const [location, setLocation] = useState('');
  const [isIndia, setIsIndia] = useState(false);

  const [openIndex, setOpenIndex] = useState(null);

  const toggleAccordion = (index) => {
    setOpenIndex(openIndex === index ? null : index);
  }

  const handleMouseEnterContact = () => {
    setIsHoveringContact(true);
    const dotElement = document.getElementById('dot');
    if (dotElement) {
      dotElement.classList.add('remove');
    }
  };

  const handleMouseLeaveContact = () => {
    setIsHoveringContact(false);
    const dotElement = document.getElementById('dot');
    if (dotElement) {
      dotElement.classList.remove('remove');
    }
  };

  useEffect(() => {
    setIsVisible(true);
    // Fetch user location
    const fetchLocation = async () => {
      try {
        const response = await axios.get('https://ipapi.co/json/');
        const data = response.data;
        setLocation(data);
        setIsIndia(data.country === 'IN');
        alert(`Location: ${data.city}, ${data.region}, ${data.country_name}`);
      } catch (error) {
        console.error('Error fetching location:', error);
      }
    };

    fetchLocation();
  }, []);

  const handleSubmit = (event) => {
    event.preventDefault();

    if (name.trim() === '' || email.trim() === '' || (isIndia && phone.trim() === '')) {
      alert('Please fill out all fields');
      return;
    }

    // EmailJS parameters
    const templateParams = {
      from_name: name,
      from_email: email,
      phone: phone,
    };

    // Replace with your EmailJS service ID, template ID, and user ID
    const serviceId = 'your_emailjs_service_id';
    const templateId = 'your_emailjs_template_id';
    const userId = 'your_emailjs_user_id';

    // Send email using EmailJS
    emailjs.send(serviceId, templateId, templateParams, userId)
      .then((response) => {
        console.log('Email sent:', response.status, response.text);
        setSubmitted(true); // Update state after successful submission
      })
      .catch((error) => {
        console.error('Email error:', error);
        // Handle error scenarios
      });
  };

  const textheadRef = useRef(null)
  const cus1Ref = useRef(null)
  const cus2Ref = useRef(null)
  const cus3Ref = useRef(null)
  const cus4Ref = useRef(null)
  const cus5Ref = useRef(null)
  const cus6Ref = useRef(null)
  const cus7Ref = useRef(null)
  const cus8Ref = useRef(null)
  const cus9Ref = useRef(null)
  const cus10Ref = useRef(null)
  const mainfaqRef = useRef(null)
  const faq1Ref = useRef(null)
  const faq2Ref = useRef(null)
  const faq3Ref = useRef(null)
  const faq4Ref = useRef(null)
  const faq5Ref = useRef(null)
  const faq6Ref = useRef(null)
  const cardRef = useRef(null);
  const newimg1Ref = useRef(null)
  const newimg2Ref = useRef(null)
  const newimg3Ref = useRef(null)
  const newimg4Ref = useRef(null)
  const newimg5Ref = useRef(null)
  const newimg6Ref = useRef(null)
  const mainimgRef = useRef(null)
  const newimg12Ref = useRef(null)
  const newimg22Ref = useRef(null)
  const newimg32Ref = useRef(null)
  const newimg42Ref = useRef(null)
  const newimg52Ref = useRef(null)
  const newimg62Ref = useRef(null)

  useGSAP(() => {
    const texthead = textheadRef.current
    const cus1 = cus1Ref.current
    const cus2 = cus2Ref.current
    const cus3 = cus3Ref.current
    const cus4 = cus4Ref.current
    const cus5 = cus5Ref.current
    const cus6 = cus6Ref.current
    const cus7 = cus7Ref.current
    const cus8 = cus8Ref.current
    const cus9 = cus9Ref.current
    const cus10 = cus10Ref.current
    const mainfaq = mainfaqRef.current
    const faq1 = faq1Ref.current
    const faq2 = faq2Ref.current
    const faq3 = faq3Ref.current
    const faq4 = faq4Ref.current
    const faq5 = faq5Ref.current
    const faq6 = faq6Ref.current
    const img1 = newimg1Ref.current
    const img2 = newimg2Ref.current
    const img3 = newimg3Ref.current
    const img4 = newimg4Ref.current
    const img5 = newimg5Ref.current
    const img6 = newimg6Ref.current
    const mainimg = mainimgRef.current
    const img12 = newimg12Ref.current
    const img22 = newimg22Ref.current
    const img32 = newimg32Ref.current
    const img42 = newimg42Ref.current
    const img52 = newimg52Ref.current
    const img62 = newimg62Ref.current

    gsap.from(texthead, {
      x: -400,
      opacity: 0,
      duration: 1.2,
      scrollTrigger: {
        trigger: texthead,
        markers: false,
        start: "top 100%"
      }
    });

    gsap.from(cus1, {
      yPercent: 350,
      duration: 2.3,
      ease: "power4",
      smooth: 1,
    });
    gsap.from(cus2, {
      yPercent: 200,
      duration: 1.6,
      smooth: 1,
    });
    gsap.from(cus3, {
      yPercent: 200,
      duration: 1.9,
      smooth: 1,
    })
    gsap.from(cus4, {
      yPercent: 200,
      duration: 2,
      smooth: 1,
    })
    gsap.from(cus5, {
      yPercent: 200,
      duration: 2.2,
      smooth: 1,
    })
    gsap.from(cus6, {
      yPercent: 200,
      duration: 2.4,
      smooth: 1,
    })
    gsap.from(cus7, {
      yPercent: 200,
      opacity: 0,
      duration: 1.2,
      smooth: 1,
    })
    gsap.from(cus8, {
      y: 400,
      duration: 1.8,
      smooth: 1,
      stagger: 2,
      scrollTrigger: {
        trigger: cus8Ref.current,
        markers: false,
        start: 'top 150%'
      }
    })
    gsap.from(cus9, {
      y: 200,
      opacity: 0,
      duration: 1.3,
      smooth: 1,
    })

    gsap.from(cus10, {
      y: 150,
      opacity: 0,
      duration: 1.8,
      smooth: 1,
      scrollTrigger: {
        trigger: cus10,
        markers: false,
        start: "bottom 120%"
      }
    })

    gsap.from(mainfaq, {
      scrollTrigger: {
        trigger: mainfaq,
        markers: false,
        start: "top 10%"
      }
    })
    gsap.from(faq1, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: faq1,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(faq2, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: faq2,
        markers: false,
        start: "top 80%"
      }
    })
    gsap.from(faq3, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: faq3,
        markers: false,
        start: "top 80%"
      }
    })
    gsap.from(faq4, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: faq4,
        markers: false,
        start: "top 80%"
      }
    })
    gsap.from(faq5, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: faq5,
        markers: false,
        start: "top 80%"
      }
    })
    gsap.from(faq6, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: faq6,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img1, {
      y: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img1,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img2, {
      y: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img2,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img3, {
      y: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img3,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img4, {
      y: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img4,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img5, {
      y: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img5,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img6, {
      y: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img6,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(mainimg, {
      scrollTrigger: {
        trigger: mainimg,
        markers: false,
        start: "top 10%"
      }
    })

    gsap.from(img12, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img12,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img22, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img22,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img32, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img32,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img42, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img42,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img52, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img52,
        markers: false,
        start: "top 80%"
      }
    })

    gsap.from(img62, {
      yPercent: 300,
      duration: 1,
      smooth: 1,
      scrollTrigger: {
        trigger: img62,
        markers: false,
        start: "top 80%"
      }
    })

  }, []);

  return (
    <div className='body contact' id='body'>
      <Header />
      <div className='dot' id='dot'></div>
      <div className="container" id="container">
        <div className="contact" id="contact">
          <div className={`txt-header ${isVisible ? 'visible' : ''}`} ref={textheadRef}>
            <h1>We're here to help!</h1>
            <p>Need assistance? Fill out the form below and our team will get back to you shortly.</p>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="contact-form">
          <div className="form-group">
            <label htmlFor="name">Name:</label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {isIndia && (
            <div className="form-group">
              <label htmlFor="phone">Phone:</label>
              <input
                type="tel"
                id="phone"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                required
              />
            </div>
          )}

          <button type="submit">Submit</button>
        </form>

        {submitted && (
          <div className="thank-you">
            <h2>Thank you for contacting us!</h2>
            <p>We will get back to you soon.</p>
          </div>
        )}

        <div className="faq-section">
          <div className="accordion" ref={mainfaqRef}>
            <div className={`accordion-item ${openIndex === 0 ? 'open' : ''}`}>
              <button className="accordion-header" onClick={() => toggleAccordion(0)} ref={faq1Ref}>
                <h3>FAQ 1</h3>
              </button>
              <div className="accordion-content">
                <p>This is the answer to FAQ 1.</p>
              </div>
            </div>

            <div className={`accordion-item ${openIndex === 1 ? 'open' : ''}`}>
              <button className="accordion-header" onClick={() => toggleAccordion(1)} ref={faq2Ref}>
                <h3>FAQ 2</h3>
              </button>
              <div className="accordion-content">
                <p>This is the answer to FAQ 2.</p>
              </div>
            </div>

            <div className={`accordion-item ${openIndex === 2 ? 'open' : ''}`}>
              <button className="accordion-header" onClick={() => toggleAccordion(2)} ref={faq3Ref}>
                <h3>FAQ 3</h3>
              </button>
              <div className="accordion-content">
                <p>This is the answer to FAQ 3.</p>
              </div>
            </div>

            <div className={`accordion-item ${openIndex === 3 ? 'open' : ''}`}>
              <button className="accordion-header" onClick={() => toggleAccordion(3)} ref={faq4Ref}>
                <h3>FAQ 4</h3>
              </button>
              <div className="accordion-content">
                <p>This is the answer to FAQ 4.</p>
              </div>
            </div>

            <div className={`accordion-item ${openIndex === 4 ? 'open' : ''}`}>
              <button className="accordion-header" onClick={() => toggleAccordion(4)} ref={faq5Ref}>
                <h3>FAQ 5</h3>
              </button>
              <div className="accordion-content">
                <p>This is the answer to FAQ 5.</p>
              </div>
            </div>

            <div className={`accordion-item ${openIndex === 5 ? 'open' : ''}`}>
              <button className="accordion-header" onClick={() => toggleAccordion(5)} ref={faq6Ref}>
                <h3>FAQ 6</h3>
              </button>
              <div className="accordion-content">
                <p>This is the answer to FAQ 6.</p>
              </div>
            </div>
          </div>
        </div>

        <Collab />

        <Footer />
      </div>
    </div>
  );
}
